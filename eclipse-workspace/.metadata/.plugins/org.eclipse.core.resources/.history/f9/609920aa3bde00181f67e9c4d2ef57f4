package br.edu.ifcvideira.controllers.views;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import java.awt.Color;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.JSeparator;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import br.edu.ifcvideira.DAOs.ClientesDao;
import br.edu.ifcvideira.beans.Clientes;

import javax.swing.JScrollPane;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.CaretEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class ClientesView extends JFrame {

	private JPanel contentPane;
	private JTextField textNome;
	private JTextField textID;
	private JTextField textCPF;
	private JTextField textTelefone;
	private JTextField textCelular;
	private JTextField textRua;
	private JTextField textBairro;
	private JTextField textCidade;
	private JTextField textEstado;
	private JTextField textBuscarID;
	private JTextField textBuscarNome;
	private JTable table;
	
	private List<Object> cliente = new ArrayList<Object>();
	
	Clientes cl = new Clientes();
	ClientesDao clDao = new ClientesDao();
	
	long time = System.currentTimeMillis();//pegar a data e a hora do cadastro
	Timestamp timestamp = new Timestamp(time);

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClientesView frame = new ClientesView();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public ClientesView() {
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowOpened(WindowEvent arg0) {
				atualizarTabela();
			}
		});
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 820, 811);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Cadastrar Cliente");
		lblNewLabel.setForeground(Color.BLUE);
		lblNewLabel.setFont(new Font("Microsoft JhengHei UI Light", Font.PLAIN, 25));
		lblNewLabel.setBounds(299, 11, 205, 33);
		contentPane.add(lblNewLabel);
		
		JLabel label = new JLabel("Nome:");
		label.setFont(new Font("Arial", Font.PLAIN, 15));
		label.setBounds(10, 92, 85, 18);
		contentPane.add(label);
		
		textNome = new JTextField();
		textNome.setColumns(10);
		textNome.setBounds(102, 92, 258, 20);
		contentPane.add(textNome);
		
		JLabel lblCdigo = new JLabel("C\u00F3digo:");
		lblCdigo.setFont(new Font("Arial", Font.PLAIN, 15));
		lblCdigo.setBounds(10, 61, 85, 18);
		contentPane.add(lblCdigo);
		
		textID = new JTextField();
		textID.setEditable(false);
		textID.setColumns(10);
		textID.setBounds(102, 61, 258, 20);
		contentPane.add(textID);
		
		JLabel lblCpf = new JLabel("CPF:");
		lblCpf.setFont(new Font("Arial", Font.PLAIN, 15));
		lblCpf.setBounds(10, 121, 85, 18);
		contentPane.add(lblCpf);
		
		textCPF = new JTextField();
		textCPF.setColumns(10);
		textCPF.setBounds(102, 121, 258, 20);
		contentPane.add(textCPF);
		
		JLabel lblTelefone = new JLabel("Telefone:");
		lblTelefone.setFont(new Font("Arial", Font.PLAIN, 15));
		lblTelefone.setBounds(10, 150, 85, 18);
		contentPane.add(lblTelefone);
		
		textTelefone = new JTextField();
		textTelefone.setColumns(10);
		textTelefone.setBounds(102, 150, 258, 20);
		contentPane.add(textTelefone);
		
		JLabel lblCelular = new JLabel("Celular:");
		lblCelular.setFont(new Font("Arial", Font.PLAIN, 15));
		lblCelular.setBounds(10, 179, 85, 18);
		contentPane.add(lblCelular);
		
		textCelular = new JTextField();
		textCelular.setColumns(10);
		textCelular.setBounds(102, 179, 258, 20);
		contentPane.add(textCelular);
		
		JLabel lblRua = new JLabel("Rua:");
		lblRua.setFont(new Font("Arial", Font.PLAIN, 15));
		lblRua.setBounds(444, 61, 85, 18);
		contentPane.add(lblRua);
		
		textRua = new JTextField();
		textRua.setColumns(10);
		textRua.setBounds(539, 61, 258, 20);
		contentPane.add(textRua);
		
		JLabel lblBairro = new JLabel("Bairro:");
		lblBairro.setFont(new Font("Arial", Font.PLAIN, 15));
		lblBairro.setBounds(444, 92, 85, 18);
		contentPane.add(lblBairro);
		
		textBairro = new JTextField();
		textBairro.setColumns(10);
		textBairro.setBounds(539, 92, 258, 20);
		contentPane.add(textBairro);
		
		JLabel lblC = new JLabel("Cidade:");
		lblC.setFont(new Font("Arial", Font.PLAIN, 15));
		lblC.setBounds(444, 121, 85, 18);
		contentPane.add(lblC);
		
		textCidade = new JTextField();
		textCidade.setColumns(10);
		textCidade.setBounds(539, 121, 258, 20);
		contentPane.add(textCidade);
		
		JLabel lblEstado = new JLabel("Estado:");
		lblEstado.setFont(new Font("Arial", Font.PLAIN, 15));
		lblEstado.setBounds(444, 150, 85, 18);
		contentPane.add(lblEstado);
		
		textEstado = new JTextField();
		textEstado.setColumns(10);
		textEstado.setBounds(539, 150, 258, 20);
		contentPane.add(textEstado);
		
		JButton btnNewButton = new JButton("Cadastrar");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					//atribuição dos valores dos campos para o objeto cliente
					cl.setNomeCliente(textNome.getText());
					cl.setCpfCliente(textCPF.getText());
					cl.setTelefoneCliente(textTelefone.getText());
					cl.setCelularCliente(textCelular.getText());
					cl.setRuaCliente(textRua.getText());
					cl.setBairroCliente(textBairro.getText());
					cl.setCideadeCliente(textCidade.getText());
					cl.setEstadoCliente(textEstado.getText());
					cl.setDataCadastroCliente(timestamp); //grava a data e a hora de cadastro
					System.out.println(timestamp);
					
					// chamada do método de cadastro na classe Dao
					clDao.CadastrarCliente(cl);
					
				} catch (Exception e) {
					JOptionPane.showMessageDialog(null, e.getMessage());
				}
				atualizarTabela();
				limpar();
			}
		});
		btnNewButton.setFont(new Font("Arial", Font.PLAIN, 17));
		btnNewButton.setBounds(10, 233, 147, 23);
		contentPane.add(btnNewButton);
		
		JButton btnAlterar = new JButton("Alterar");
		btnAlterar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (table.getSelectedRow() != -1){
					try {
						  
						//atribuição dos valores dos campos para o objeto cliente
						cl.setIdCliente(Integer.parseInt(textID.getText()));
						cl.setNomeCliente(textNome.getText());
						cl.setCpfCliente(textCPF.getText());
						cl.setTelefoneCliente(textTelefone.getText());
						cl.setCelularCliente(textCelular.getText());
						cl.setRuaCliente(textRua.getText());
						cl.setBairroCliente(textBairro.getText());
						cl.setCideadeCliente(textCidade.getText());
						cl.setEstadoCliente(textEstado.getText());
						// chamada do método de alteração na classe Dao
						clDao.AlterarCliente(cl);
						
		
					} catch (Exception e1) {
						JOptionPane.showMessageDialog(null, e1.getMessage());
					}
					atualizarTabela();
				}
				
				else{
					JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada");
				}
			}
		});
		btnAlterar.setFont(new Font("Arial", Font.PLAIN, 17));
		btnAlterar.setBounds(213, 233, 147, 23);
		contentPane.add(btnAlterar);
		
		JButton btnLimpar = new JButton("Limpar");
		btnLimpar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				limpar();
			}
		});
		btnLimpar.setFont(new Font("Arial", Font.PLAIN, 17));
		btnLimpar.setBounds(437, 233, 147, 23);
		contentPane.add(btnLimpar);
		
		JButton btnExcluir = new JButton("Excluir");
		btnExcluir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (table.getSelectedRow() != -1){
					Object[] options3 = {"Excluir", "Cancelar"};
					if(JOptionPane.showOptionDialog(null, "Tem certeza que deseja excluir o registro:\n>   " 
							+ table.getValueAt(table.getSelectedRow(), 0) + "   -   "
							+ table.getValueAt(table.getSelectedRow(), 1), null,
							JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options3, options3[0]) == 0){
						try {
						
							//atribuição do valor do campo código para o objeto cliente
							cl.setIdCliente(Integer.parseInt(textID.getText()));
							
							// chamada do método de exclusão na classe Dao passando como parâmetro o código do cliente para ser excluído
							clDao.deletarCliente(cl);
							
						
							atualizarTabela();
							limpar();
						} catch (Exception e1) {
							JOptionPane.showMessageDialog(null, e1.getMessage());
						}
					}
				}
				else{
					JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada");
				}
			}
		});
		btnExcluir.setFont(new Font("Arial", Font.PLAIN, 17));
		btnExcluir.setBounds(647, 233, 147, 23);
		contentPane.add(btnExcluir);
		
		JSeparator separator_1 = new JSeparator();
		separator_1.setBounds(10, 279, 784, 2);
		contentPane.add(separator_1);
		
		JLabel lblBuscar = new JLabel("Buscar:");
		lblBuscar.setForeground(Color.BLUE);
		lblBuscar.setFont(new Font("Microsoft JhengHei UI Light", Font.PLAIN, 17));
		lblBuscar.setBounds(10, 297, 75, 23);
		contentPane.add(lblBuscar);
		
		JLabel label_1 = new JLabel("C\u00F3digo:");
		label_1.setFont(new Font("Arial", Font.PLAIN, 15));
		label_1.setBounds(34, 331, 85, 18);
		contentPane.add(label_1);
		
		textBuscarID = new JTextField();
		textBuscarID.addCaretListener(new CaretListener() {
			public void caretUpdate(CaretEvent arg0) {
				//atualizar a tabela apenas com valores correspondentes aos digitados no campo de busca por codigo
				TableRowSorter<TableModel> filtro = null;  
				DefaultTableModel model = (DefaultTableModel) table.getModel();  
				filtro = new TableRowSorter<TableModel>(model);  
				table.setRowSorter(filtro);
				
				if (textBuscarID.getText().length() == 0) {
					filtro.setRowFilter(null);
				} else {  
					filtro.setRowFilter(RowFilter.regexFilter(textBuscarID.getText(), 0));  
				}  
			}
		});
		textBuscarID.setColumns(10);
		textBuscarID.setBounds(126, 331, 668, 20);
		contentPane.add(textBuscarID);
		
		textBuscarNome = new JTextField();
		textBuscarNome.addCaretListener(new CaretListener() {
			public void caretUpdate(CaretEvent e) {
				//atualizar a tabela apenas com valores correspondentes aos digitados no campo de busca por nome
				TableRowSorter<TableModel> filtro = null;  
				DefaultTableModel model = (DefaultTableModel) table.getModel();  
				filtro = new TableRowSorter<TableModel>(model);  
				table.setRowSorter(filtro); 
				
				if (textBuscarNome.getText().length() == 0) {
					filtro.setRowFilter(null);
				} else {  
					filtro.setRowFilter(RowFilter.regexFilter("(?i)" + textBuscarNome.getText(), 1));  
				}  
			}
		});
		textBuscarNome.setColumns(10);
		textBuscarNome.setBounds(126, 362, 668, 20);
		contentPane.add(textBuscarNome);
		
		JLabel label_2 = new JLabel("Nome:");
		label_2.setFont(new Font("Arial", Font.PLAIN, 15));
		label_2.setBounds(34, 362, 85, 18);
		contentPane.add(label_2);
		
		JSeparator separator_2 = new JSeparator();
		separator_2.setBounds(10, 408, 784, 2);
		contentPane.add(separator_2);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 440, 784, 321);
		contentPane.add(scrollPane);
		
		table = new JTable();
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent arg0) {
				setCamposFromTabela();
			}
		});
		scrollPane.setViewportView(table);
		table.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"Código", "Nome", "CPF", "Telefone", "Celular", "Rua", "Bairro", "Cidade", "Estado"
			}
		));
	}
	public void sair() {
		System.exit(0);
	}

	public void setCamposFromTabela() {
		textID.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 0)));
		textNome.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 1)));
		textCPF.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 2)));
		textTelefone.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 3)));
		textCelular.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 4)));
		textRua.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 6)));
		textBairro.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 7)));
		textCidade.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 8)));
		textEstado.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 9)));
	}

	public void limpar() {
		textNome.setText(null);
		textCPF.setText(null);
		textTelefone.setText(null);
		textCelular.setText(null);
		textRua.setText(null);
		textBairro.setText(null);
		textCidade.setText(null);
		textEstado.setText(null);
		try {
			textID.setText(String.valueOf(clDao.RetornarProximoCodigoCliente()));
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}

	public void atualizarTabela() {
		try {
			cliente = clDao.buscarTodos();
			DefaultTableModel model = (DefaultTableModel) table.getModel();
			model.setNumRows(0);
		for (int x=0; x!=cliente.size(); x++)
			{
				model.addRow((Object[]) cliente.get(x));
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}
}
